const Welfare = require('../models/Welfare');

class WelfareService {
  /**
   * Î™®Îì† Î≥µÏßÄ ÏÑúÎπÑÏä§ Ï°∞Ìöå
   */
  static async getAllWelfareServices() {
    try {
      const welfareList = await Welfare.findAll({
        where: { isActive: true },
        order: [['welfareNo', 'ASC']]
      });

      return welfareList.map(welfare => ({
        welfareNo: welfare.welfareNo,
        serviceId: welfare.serviceId,
        serviceName: welfare.serviceName,
        serviceSummary: welfare.serviceSummary,
        ministryName: welfare.ministryName,
        organizationName: welfare.organizationName,
        contactInfo: welfare.contactInfo,
        website: welfare.website,
        serviceUrl: welfare.serviceUrl,
        targetAudience: welfare.targetAudience,
        applicationMethod: welfare.applicationMethod,
        category: welfare.category
      }));

    } catch (error) {
      console.error('‚ùå WelfareService.getAllWelfareServices Error:', error);
      throw error;
    }
  }

  /**
   * IDÎ°ú ÌäπÏ†ï Î≥µÏßÄ ÏÑúÎπÑÏä§ Ï°∞Ìöå
   */
  static async getWelfareById(welfareNo) {
    try {
      const welfare = await Welfare.findOne({
        where: { welfareNo, isActive: true }
      });

      if (!welfare) {
        return null;
      }

      return {
        welfareNo: welfare.welfareNo,
        serviceId: welfare.serviceId,
        serviceName: welfare.serviceName,
        serviceSummary: welfare.serviceSummary,
        ministryName: welfare.ministryName,
        organizationName: welfare.organizationName,
        contactInfo: welfare.contactInfo,
        website: welfare.website,
        serviceUrl: welfare.serviceUrl,
        targetAudience: welfare.targetAudience,
        applicationMethod: welfare.applicationMethod,
        category: welfare.category
      };

    } catch (error) {
      console.error('‚ùå WelfareService.getWelfareById Error:', error);
      throw error;
    }
  }

  /**
   * ÏÉà Î≥µÏßÄ ÏÑúÎπÑÏä§ ÏÉùÏÑ±
   */
  static async createWelfare(welfareData) {
    try {
      const welfare = await Welfare.create(welfareData);

      console.log(`‚úÖ New welfare service created - WelfareNo: ${welfare.welfareNo}, Name: ${welfare.serviceName}`);

      return welfare.welfareNo;

    } catch (error) {
      console.error('‚ùå WelfareService.createWelfare Error:', error);
      throw error;
    }
  }

  /**
   * Î≥µÏßÄ ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏ†ï
   */
  static async updateWelfare(welfareNo, updateData) {
    try {
      const welfare = await Welfare.findOne({
        where: { welfareNo }
      });

      if (!welfare) {
        return false;
      }

      await welfare.update(updateData);

      console.log(`üîÑ Welfare service updated - WelfareNo: ${welfareNo}`);

      return true;

    } catch (error) {
      console.error('‚ùå WelfareService.updateWelfare Error:', error);
      throw error;
    }
  }

  /**
   * Î≥µÏßÄ ÏÑúÎπÑÏä§ ÏÇ≠Ï†ú
   */
  static async deleteWelfare(welfareNo) {
    try {
      const welfare = await Welfare.findOne({
        where: { welfareNo }
      });

      if (!welfare) {
        return false;
      }

      await welfare.update({ isActive: false });

      console.log(`üóëÔ∏è Welfare service deleted - WelfareNo: ${welfareNo}`);

      return true;

    } catch (error) {
      console.error('‚ùå WelfareService.deleteWelfare Error:', error);
      throw error;
    }
  }

  /**
   * Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î≥µÏßÄ ÏÑúÎπÑÏä§ Ï°∞Ìöå
   */
  static async getWelfareByCategory(category) {
    try {
      const welfareList = await Welfare.findAll({
        where: { 
          category: category,
          isActive: true 
        },
        order: [['serviceName', 'ASC']]
      });

      return welfareList.map(welfare => ({
        welfareNo: welfare.welfareNo,
        serviceId: welfare.serviceId,
        serviceName: welfare.serviceName,
        serviceSummary: welfare.serviceSummary,
        ministryName: welfare.ministryName,
        organizationName: welfare.organizationName,
        contactInfo: welfare.contactInfo,
        website: welfare.website,
        serviceUrl: welfare.serviceUrl,
        targetAudience: welfare.targetAudience,
        applicationMethod: welfare.applicationMethod,
        category: welfare.category
      }));

    } catch (error) {
      console.error('‚ùå WelfareService.getWelfareByCategory Error:', error);
      throw error;
    }
  }

  /**
   * ÌÇ§ÏõåÎìúÎ°ú Î≥µÏßÄÏÑúÎπÑÏä§ Í≤ÄÏÉâ
   */
  static async searchWelfareServices(keyword) {
    try {
      const { Op } = require('sequelize');
      
      const welfareList = await Welfare.findAll({
        where: {
          [Op.and]: [
            { isActive: true },
            {
              [Op.or]: [
                { serviceName: { [Op.iLike]: `%${keyword}%` } },
                { serviceSummary: { [Op.iLike]: `%${keyword}%` } },
                { category: { [Op.iLike]: `%${keyword}%` } },
                { targetAudience: { [Op.iLike]: `%${keyword}%` } }
              ]
            }
          ]
        },
        order: [['serviceName', 'ASC']]
      });

      return welfareList.map(welfare => ({
        welfareNo: welfare.welfareNo,
        serviceId: welfare.serviceId,
        serviceName: welfare.serviceName,
        serviceSummary: welfare.serviceSummary,
        ministryName: welfare.ministryName,
        organizationName: welfare.organizationName,
        contactInfo: welfare.contactInfo,
        website: welfare.website,
        serviceUrl: welfare.serviceUrl,
        targetAudience: welfare.targetAudience,
        applicationMethod: welfare.applicationMethod,
        category: welfare.category
      }));

    } catch (error) {
      console.error('‚ùå WelfareService.searchWelfareServices Error:', error);
      throw error;
    }
  }

  /**
   * AI Ï±óÎ¥áÏö© Î≥µÏßÄÏÑúÎπÑÏä§ Ï∂îÏ≤ú (Í∏∞Ï°¥ Í≥µÍ≥µ API Îç∞Ïù¥ÌÑ∞ ÌôúÏö©)
   */
  static async getRecommendedWelfareForAI(userAge = null, interests = [], maxCount = 3) {
    try {
      const { Op } = require('sequelize');
      
      let whereCondition = { isActive: true };
      
      // Í¥ÄÏã¨ÏÇ¨Ïóê Îî∞Î•∏ Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ÎßÅ
      if (interests && interests.length > 0) {
        const categoryConditions = interests.map(interest => {
          return {
            [Op.or]: [
              { category: { [Op.iLike]: `%${interest}%` } },
              { serviceName: { [Op.iLike]: `%${interest}%` } },
              { serviceSummary: { [Op.iLike]: `%${interest}%` } },
              { targetAudience: { [Op.iLike]: `%${interest}%` } }
            ]
          };
        });
        
        whereCondition[Op.or] = categoryConditions;
      }

      const welfareList = await Welfare.findAll({
        where: whereCondition,
        order: [['serviceName', 'ASC']],
        limit: maxCount * 2 // Îçî ÎßéÏù¥ Í∞ÄÏ†∏ÏôÄÏÑú ÎûúÎç§ ÏÑ†ÌÉù
      });

      // ÎûúÎç§ÌïòÍ≤å ÏÑûÏñ¥ÏÑú maxCountÎßåÌÅº ÏÑ†ÌÉù
      const shuffled = welfareList.sort(() => 0.5 - Math.random());
      const selected = shuffled.slice(0, maxCount);

      return selected.map(welfare => ({
        welfareNo: welfare.welfareNo,
        serviceId: welfare.serviceId,
        serviceName: welfare.serviceName,
        serviceSummary: welfare.serviceSummary,
        ministryName: welfare.ministryName,
        organizationName: welfare.organizationName,
        contactInfo: welfare.contactInfo,
        website: welfare.website,
        serviceUrl: welfare.serviceUrl,
        targetAudience: welfare.targetAudience,
        applicationMethod: welfare.applicationMethod,
        category: welfare.category
      }));

    } catch (error) {
      console.error('‚ùå WelfareService.getRecommendedWelfareForAI Error:', error);
      throw error;
    }
  }
}

module.exports = WelfareService;