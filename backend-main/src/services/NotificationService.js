const Notification = require('../models/Notification');
const User = require('../models/User');

class NotificationService {
  /**
   * ÏÇ¨Ïö©ÏûêÏùò Î™®Îì† ÏïåÎ¶º Ï°∞Ìöå
   */
  static async getAllNotificationsByUser(userNo) {
    try {
      const notifications = await Notification.findAll({
        where: { userNo },
        include: [
          {
            model: User,
            as: 'user',
            attributes: ['userNo', 'userId', 'userName']
          }
        ],
        order: [['notificationCreatedAt', 'DESC']]
      });

      return notifications.map(notification => ({
        notificationNo: notification.notificationNo,
        notificationTitle: notification.notificationTitle,
        notificationContent: notification.notificationContent,
        notificationIsRead: notification.notificationIsRead,
        notificationType: notification.notificationType,
        notificationCreatedAt: notification.notificationCreatedAt
      }));

    } catch (error) {
      console.error('‚ùå NotificationService.getAllNotificationsByUser Error:', error);
      throw error;
    }
  }

  /**
   * ÏïåÎ¶º ÏÉùÏÑ±
   */
  static async createNotification({ userNo, notificationTitle, notificationContent, notificationType = 'GENERAL' }) {
    try {
      // ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ ÌôïÏù∏
      const user = await User.findOne({
        where: { userNo, isActive: true }
      });

      if (!user) {
        throw new Error('ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      const notification = await Notification.create({
        userNo,
        notificationTitle,
        notificationContent,
        notificationIsRead: false,
        notificationType,
        notificationCreatedAt: new Date()
      });

      console.log(`üîî Notification created - No: ${notification.notificationNo}, UserNo: ${userNo}, Type: ${notificationType}`);

      return notification.notificationNo;

    } catch (error) {
      console.error('‚ùå NotificationService.createNotification Error:', error);
      throw error;
    }
  }

  /**
   * ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
   */
  static async markAsRead(notificationNo, userNo) {
    try {
      const notification = await Notification.findOne({
        where: { 
          notificationNo,
          userNo // ÏÜåÏú†Í∂å ÌôïÏù∏
        }
      });

      if (!notification) {
        throw new Error('ÏïåÎ¶ºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      if (notification.notificationIsRead) {
        return false; // Ïù¥ÎØ∏ ÏùΩÏùå Ï≤òÎ¶¨Îê®
      }

      await notification.update({
        notificationIsRead: true
      });

      console.log(`üìñ Notification marked as read - No: ${notificationNo}, UserNo: ${userNo}`);

      return true;

    } catch (error) {
      console.error('‚ùå NotificationService.markAsRead Error:', error);
      throw error;
    }
  }

  /**
   * Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
   */
  static async markAllAsRead(userNo) {
    try {
      const result = await Notification.update(
        { notificationIsRead: true },
        { 
          where: { 
            userNo,
            notificationIsRead: false
          }
        }
      );

      console.log(`üìñ All notifications marked as read - UserNo: ${userNo}, Count: ${result[0]}`);

      return result[0]; // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÌñâÏùò Ïàò

    } catch (error) {
      console.error('‚ùå NotificationService.markAllAsRead Error:', error);
      throw error;
    }
  }

  /**
   * ÏïåÎ¶º ÏÇ≠Ï†ú
   */
  static async deleteNotification(notificationNo, userNo) {
    try {
      const notification = await Notification.findOne({
        where: { 
          notificationNo,
          userNo // ÏÜåÏú†Í∂å ÌôïÏù∏
        }
      });

      if (!notification) {
        throw new Error('ÏïåÎ¶ºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      await notification.destroy();

      console.log(`üóëÔ∏è Notification deleted - No: ${notificationNo}, UserNo: ${userNo}`);

      return true;

    } catch (error) {
      console.error('‚ùå NotificationService.deleteNotification Error:', error);
      throw error;
    }
  }

  /**
   * ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º Í∞úÏàò Ï°∞Ìöå
   */
  static async getUnreadCount(userNo) {
    try {
      const count = await Notification.count({
        where: { 
          userNo,
          notificationIsRead: false
        }
      });

      return count;

    } catch (error) {
      console.error('‚ùå NotificationService.getUnreadCount Error:', error);
      throw error;
    }
  }

  /**
   * ÌäπÏ†ï ÌÉÄÏûÖÏùò ÏïåÎ¶º Ï°∞Ìöå
   */
  static async getNotificationsByType(userNo, notificationType) {
    try {
      const notifications = await Notification.findAll({
        where: { 
          userNo,
          notificationType
        },
        order: [['notificationCreatedAt', 'DESC']]
      });

      return notifications.map(notification => ({
        notificationNo: notification.notificationNo,
        notificationTitle: notification.notificationTitle,
        notificationContent: notification.notificationContent,
        notificationIsRead: notification.notificationIsRead,
        notificationType: notification.notificationType,
        notificationCreatedAt: notification.notificationCreatedAt
      }));

    } catch (error) {
      console.error('‚ùå NotificationService.getNotificationsByType Error:', error);
      throw error;
    }
  }

  /**
   * Ïò§ÎûòÎêú ÏïåÎ¶º Ï†ïÎ¶¨ (30Ïùº Ïù¥ÏÉÅ)
   */
  static async cleanupOldNotifications() {
    try {
      const { Op } = require('sequelize');
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const result = await Notification.destroy({
        where: {
          notificationCreatedAt: {
            [Op.lt]: thirtyDaysAgo
          },
          notificationIsRead: true // ÏùΩÏùÄ ÏïåÎ¶ºÎßå ÏÇ≠Ï†ú
        }
      });

      console.log(`üßπ Old notifications cleaned up - Count: ${result}`);

      return result;

    } catch (error) {
      console.error('‚ùå NotificationService.cleanupOldNotifications Error:', error);
      throw error;
    }
  }
}

module.exports = NotificationService;
