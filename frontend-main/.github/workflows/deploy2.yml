name: knockknock front deploy2

env:
  IMAGE_NAME: knock-knock-front-test
  CONTAINER_NAME: knock-knock-front
  PROJECT_DIR: /home/ubuntu/knock-knock

on:
  push:
    branches: [ "main" ]
  # workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
  
      - name: Build and Push Docker images
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            REACT_APP_API_URL=${{secrets.REACT_APP_URL}}
  
  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST2 }}
          port: 22
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            mkdir test-test

            # Update .env file with the latest image tag
            sudo echo "PROJECT_ROOT=${{ env.PROJECT_DIR }}" > ${{ env.PROJECT_DIR }}/.env.front
            sudo echo "FRONTEND_DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> ${{ env.PROJECT_DIR }}/.env.front
            sudo echo "FRONTEND_IMAGE_NAME=${{ env.IMAGE_NAME }}" >> ${{ env.PROJECT_DIR }}/.env.front
            sudo echo "FRONTEND_IMAGE_TAG=${{ github.sha }}" >> ${{ env.PROJECT_DIR }}/.env.front

            sudo cat ${{ env.PROJECT_DIR }}/.env.front > ${{ env.PROJECT_DIR }}/.env
            sudo cat ${{ env.PROJECT_DIR }}/.env.back >> ${{ env.PROJECT_DIR }}/.env

            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

            # Stop and remove the existing container
            sudo docker-compose -f ${{ env.PROJECT_DIR }}/podman-compose3.yml down || true

            # Start the new container using the updated podman-compose3.yml
            sudo docker-compose -f ${{ env.PROJECT_DIR }}/podman-compose3.yml up -d
            
            # Clean up unused Docker images
            sudo docker image prune -af