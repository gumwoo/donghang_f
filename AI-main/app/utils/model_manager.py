import gdown
import zipfile
import os
import json
import logging

from ..core import logger
from .const import RESOUERCES_DIR

def model_download(name: str, id: str) -> str:
    logger.info(f"üìå Starting model download for {name}...")
    
    file_name = None
    try:
        # Google Drive Îã§Ïö¥Î°úÎìú URL ÏßÅÏ†ë ÏÉùÏÑ±
        download_url = f"https://drive.google.com/uc?id={id}"
        
        # gdownÏúºÎ°ú Îã§Ïö¥Î°úÎìú ÏãúÎèÑ
        file_name = gdown.download(id=id, output=name, quiet=False)
        logger.info(f"‚úÖ Downloaded {file_name}")
        
        # ÎßåÏïΩ gdownÏù¥ Ïã§Ìå®ÌïòÎ©¥ ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        if not file_name or not os.path.exists(name):
            logger.warning(f"‚ö†Ô∏è gdown failed to download. Please download manually from: {download_url}")
            logger.warning(f"‚ö†Ô∏è Save it as: {name}")
            # ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ Ïû¨ÌôïÏù∏
            if os.path.exists(name):
                logger.info(f"‚úÖ File already exists at {name}")
                file_name = name
    except Exception as e:
        logger.error(f"‚ùå Failed to download the file - {name}: {str(e)}")
        logger.warning(f"‚ö†Ô∏è Please download manually from: {download_url}")
        logger.warning(f"‚ö†Ô∏è Save it as: {name}")
        # ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
        if os.path.exists(name):
            logger.info(f"‚úÖ File already exists at {name}")
            file_name = name
    
    return file_name

def unzip_file(zip_file_path, extract_to_path=None):
    """
    Ï£ºÏñ¥ÏßÑ zip ÌååÏùºÏùò ÏïïÏ∂ïÏùÑ Ìë∏Îäî Ìï®Ïàò.

    :param zip_file_path: ÏïïÏ∂ïÏùÑ ÌíÄ zip ÌååÏùºÏùò Í≤ΩÎ°ú
    :param extract_to_path: ÏïïÏ∂ïÏùÑ ÌíÄ Ìè¥ÎçîÏùò Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: zip ÌååÏùºÍ≥º ÎèôÏùºÌïú ÏúÑÏπòÏóê ÎèôÏùºÌïú Ïù¥Î¶ÑÏùò Ìè¥Îçî)
    """
    if not os.path.exists(zip_file_path):
        logger.error(f"‚ùå Zip file not found: {zip_file_path}")
        return False
        
    if extract_to_path is None:
        extract_to_path = os.path.splitext(zip_file_path)[0]
    
    # Ïù¥ÎØ∏ ÏïïÏ∂ï Ìï¥Ï†úÎêú ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏûàÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
    if os.path.exists(extract_to_path) and os.path.isdir(extract_to_path):
        logger.info(f"‚úÖ Directory already exists: {extract_to_path}, skipping extraction")
        return True

    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_to_path)
        logger.info(f"‚úÖ The file has been successfully extracted to the {extract_to_path} folder.")
        return True
    except Exception as e:
        logger.error(f"‚ùå Failed to extract {zip_file_path}: {str(e)}")
        return False

def download_model():
    try:
        # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        os.makedirs(RESOUERCES_DIR, exist_ok=True)
        
        # Îç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥ ÌååÏùº Í≤ΩÎ°ú
        data_json = os.path.join(RESOUERCES_DIR, "data_info.json")
        
        # ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ Î™®Îç∏ Îã§Ïö¥Î°úÎìú Í±¥ÎÑàÎõ∞Í∏∞
        if not os.path.isfile(data_json):
            logger.warning("‚ö†Ô∏è data_info.json file not found. Skipping model download.")
            return
        
        # ÌååÏùº ÏùΩÍ∏∞ ÏãúÎèÑ
        try:
            data_dict = json.load(open(data_json, encoding='utf-8'))
        except Exception as e:
            logger.error(f"‚ùå Failed to load data_info.json: {str(e)}")
            return
        
        # Î™®Îç∏ Î™©Î°ù ÌôïÏù∏
        if 'model_list' not in data_dict or not data_dict['model_list']:
            logger.warning("‚ö†Ô∏è No models defined in data_info.json. Skipping model download.")
            return
        
        # Î™®Îç∏ Îã§Ïö¥Î°úÎìú (gdown Ïò§Î•ò Ïãú Î¨¥Ïãú)
        success_count = 0
        for model in data_dict['model_list']:
            try:
                file_name = os.path.join(RESOUERCES_DIR, model['name'])
                model_dir = os.path.splitext(file_name)[0]
                
                # Ïù¥ÎØ∏ ÏïïÏ∂ï Ìï¥Ï†úÎêú ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏûàÏúºÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
                if os.path.exists(model_dir) and os.path.isdir(model_dir):
                    logger.info(f"‚úÖ Model directory already exists: {model_dir}")
                    success_count += 1
                    continue
                
                # Îã§Ïö¥Î°úÎìú ÎòêÎäî Í∏∞Ï°¥ ÌååÏùº ÌôïÏù∏
                if not os.path.isfile(file_name):
                    downloaded = model_download(file_name, model['id'])
                else:
                    logger.info(f"‚úÖ Model file already exists: {file_name}")
                    downloaded = file_name
                
                # ÏïïÏ∂ï Ìï¥Ï†ú
                if downloaded:
                    if unzip_file(file_name):
                        success_count += 1
            except Exception as e:
                logger.error(f"‚ùå Error processing model {model.get('name', 'unknown')}: {str(e)}")
        
        if success_count > 0:
            logger.info(f"‚úÖ Successfully processed {success_count} models")
        else:
            logger.warning("‚ö†Ô∏è No models were successfully processed")
                
    except Exception as e:
        logger.error(f"‚ùå Error in download_model: {str(e)}")
        logger.info("‚ö†Ô∏è Continuing without model download...")
